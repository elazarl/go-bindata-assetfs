package main

import (
	"bufio"
	"bytes"
	"os"
	"reflect"
	"strings"
	"testing"
)

func helper(t *testing.T, tmp string, args []string) Config {
	c, err := parseConfig(args)
	if err != nil {
		t.Fatalf("parseConfig failed: %v", err)
	}

	if tmp != "" {
		if c.TempPath != tmp {
			t.Fatalf("Expected c.TempFile to be %s, got %s", tmp, c.TempPath)
		}
	} else if strings.HasPrefix(c.TempPath, os.TempDir()) {
		os.Remove(c.TempPath)
	} else {
		t.Fatalf("TempPath should live in system temp directory, got %s", c.TempPath)
	}

	if !strings.HasSuffix(c.ExecPath, "go-bindata") {
		t.Fatalf("ExecPath should point to go-bindata binary, got %s", c.ExecPath)
	}
	return c
}

func TestConfigParseEmpty(t *testing.T) {
	c := helper(t, "", []string{})
	expected := Config{
		Debug:    false,
		ExecPath: c.ExecPath,
		TempPath: c.TempPath,
		OutPath:  "bindata.go",
		Args:     []string{"-o", c.TempPath},
	}
	if !reflect.DeepEqual(c, expected) {
		t.Fatalf("Expected %v, got %v", expected, c)
	}
}

func TestConfigParseDebug(t *testing.T) {
	c := helper(t, "", []string{"-debug", "-debug", "-debug"})
	expected := Config{
		Debug:    true,
		ExecPath: c.ExecPath,
		TempPath: c.TempPath,
		OutPath:  "bindata.go",
		Args:     []string{"-o", c.TempPath, "-debug"},
	}
	if !reflect.DeepEqual(c, expected) {
		t.Fatalf("Expected %v, got %v", expected, c)
	}
}

func TestConfigParseArgs(t *testing.T) {
	c := helper(t, "", []string{"x", "y", "-debug", "z"})
	expected := Config{
		Debug:    true,
		ExecPath: c.ExecPath,
		TempPath: c.TempPath,
		OutPath:  "bindata.go",
		Args:     []string{"-o", c.TempPath, "-debug", "x", "y", "z"},
	}
	if !reflect.DeepEqual(c, expected) {
		t.Fatalf("Expected %v, got %v", expected, c)
	}
}

func TestConfigParsePaths(t *testing.T) {
	c := helper(t, "tempfile.go", []string{"-t", "tempfile.go", "-o", "outfile.go"})
	expected := Config{
		Debug:    false,
		ExecPath: c.ExecPath,
		TempPath: "tempfile.go",
		OutPath:  "outfile.go",
		Args:     []string{"-o", "tempfile.go"},
	}
	if !reflect.DeepEqual(c, expected) {
		t.Fatalf("Expected %v, got %v", expected, c)
	}
}

func TestProduceTempfile(t *testing.T) {
	c := helper(t, "", []string{"."})
	err := produceTempfile(c)
	if err != nil {
		t.Fatalf("Couldn't produce %s: %v", c.TempPath, err)
	}
	defer os.Remove(c.TempPath)

	// Let's look at that tempfile and sanity check the contents!
	f, err := os.Open(c.TempPath)
	if err != nil {
		t.Fatalf("Couldn't open %s: %v", c.TempPath, err)
	}
	defer f.Close()

	sc := bufio.NewReader(f)
	line, err := sc.ReadString([]byte("\n")[0])
	if err != nil {
		t.Fatalf("Couldn't read %s: %v", c.TempPath, err)
	}
	expected := "// Code generated by go-bindata. DO NOT EDIT.\n"
	if line != expected {
		t.Fatalf("Expected %v, got %v", expected, line)
	}
}

func TestProduceOutfile(t *testing.T) {
	c := helper(t, "", []string{".", "-o", "an-output.go"})
	err := os.WriteFile(c.TempPath, []byte(`
// Imagine, just imagine, that this file was produced by go-bindata.

import (
	"foo"
	"bar"
)

func example() {
}
`), 0644)
	if err != nil {
		t.Fatalf("Could not write to %s, %v:", c.TempPath, err)
	}
	defer os.Remove(c.TempPath)

	err = produceOutfile(c)
	if err != nil {
		t.Fatalf("produceOutfile failed: %v", err)
	}
	defer os.Remove(c.OutPath)

	out, err := os.ReadFile(c.OutPath)
	if err != nil {
		t.Fatalf("Could not read from %s, %v:", c.OutPath, err)
	}
	expected := `
// Imagine, just imagine, that this file was produced by go-bindata.

import (
	"github.com/elazarl/go-bindata-assetfs"
	"foo"
	"bar"
)

func example() {
}

func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}

func AssetFS() *assetfs.AssetFS {
	return assetFS()
}
`
	if string(out) != expected {
		t.Fatalf("Expected: %v\n\nGot: %v", expected, string(out))
	}
}

func TestProduceOutfileDebug(t *testing.T) {
	c := helper(t, "", []string{".", "-debug", "-o", "an-output.go"})
	err := os.WriteFile(c.TempPath, []byte(`
// Imagine, just imagine, that this file was produced by go-bindata.

import (
	"foo"
	"bar"
)

func example() {
}
`), 0644)
	if err != nil {
		t.Fatalf("Could not write to %s, %v:", c.TempPath, err)
	}
	defer os.Remove(c.TempPath)

	err = produceOutfile(c)
	if err != nil {
		t.Fatalf("produceOutfile failed: %v", err)
	}
	defer os.Remove(c.OutPath)

	out, err := os.ReadFile(c.OutPath)
	if err != nil {
		t.Fatalf("Could not read from %s, %v:", c.OutPath, err)
	}
	expected := `
// Imagine, just imagine, that this file was produced by go-bindata.

import (
	"net/http"
	"foo"
	"bar"
)

func example() {
}

func assetFS() http.FileSystem {
	for k := range _bintree.Children {
		return http.Dir(k)
	}
	panic("unreachable")
}

func AssetFS() http.FileSystem {
	return assetFS()
}
`
	if string(out) != expected {
		t.Fatalf("Expected: %v\n\nGot: %v", expected, string(out))
	}
}

func TestGenerate(t *testing.T) {
	err := generate([]string{".", "-o", "outfile.go"})
	if err != nil {
		t.Fatalf("Generate failed: %v", err)
	}
	defer os.Remove("outfile.go")

	out, err := os.ReadFile("outfile.go")
	if !bytes.Contains(out, []byte(`	"github.com/elazarl/go-bindata-assetfs"`)) {
		t.Fatalf("Outfile did not contain go-bindata-assetfs import")
	}
}
